import pygame, sys, time
from pygame.locals import *
import random



#COLORS
colorRed=pygame.Color(241,59,62)
#colorBlue=pygame.Color(200,254,249)
colorBlue=pygame.Color(107,0,173)
colorGreen=pygame.Color(100,182,100)
colorWhite=pygame.Color(255,250,250)
colorBlack=pygame.Color(0,0,0)
colorOrange=pygame.Color(242,164,0)
colorBrown=pygame.Color(148,103,58)

# Variables 
w=800
h=600
snowFlake = []
x=w//2
y=h//2
r=50
x_dir=0
y_dir=0
r_change=0
ground=h-(h//10)
r2=r*1.25
r3=r2*1.25
sm_height=(r*2)+(r2*2)+(r3*2)
sm_bottom=(sm_height-(r2+r3))+y
jump= False
jumpcount=10


#screen init
pygame.init()
fpsClock=pygame.time.Clock()
screen=pygame.display.set_mode((w,h))
pygame.display.set_caption ('Snowman')
#Generates snowflake coords
for i in range(50):
    snowFlake.append([random.randint(1,w),random.randint(1,h),random.randint(1,5)])
#Snowman Function
def snowman (x,y,r):
    """snowman(x,y,r) - takes in values to create a snowman out of those dimensions"""
    
    #ARMS
    pygame.draw.rect(screen,colorBrown,(x-int(r*2.5),y+r*1.25,int(r*5),int(r/5)))
    pygame.draw.rect(screen,colorBrown,(x-int(r*2),y+r,int(r/5),int(r/1.5)))
    pygame.draw.rect(screen,colorBrown,(x+int(r*2),y+r,int(r/5),int(r/1.5)))
    #3 SNOWBALLS (body)
    pygame.draw.circle(screen,colorWhite,(x,int(y)),r)
    pygame.draw.circle(screen,colorWhite,(x,int(y)+r*2),int(r*1.25))
    pygame.draw.circle(screen,colorWhite,(x,int(y)+r*4),int((r*1.25)*1.25))
    #EYES
    pygame.draw.circle(screen,colorBlack,(x-int(r/2),int(y)-int(r/4)),int(r/6))
    pygame.draw.circle(screen,colorBlack,(x+int(r/2),int(y)-int(r/4)),int(r/6))
    #HAT
    pygame.draw.rect(screen, colorBlack, (x-r*1.25,y-r,r*2.5,r/3))
    pygame.draw.rect(screen,colorBlack,(int(x-r/1.25),int(y-r*2.5),int(r*1.6),int(r*1.5)))
    pygame.draw.rect(screen,colorRed,(int(x-r/1.25),int(y-r-r/3),int(r*1.6),int(r/3)))
    #MOUTH
    pygame.draw.circle(screen,colorBlack,(x,int(y)+int(r/3)),int(r/2.5))
    pygame.draw.rect(screen,colorWhite,(int(x-int(r/2)),int(y)-int(r/10),r,int(r/2)))
    #BUTTONS
    pygame.draw.circle(screen,colorBlack,(x,int(y+r*2)),int(r/6))
    pygame.draw.circle(screen,colorBlack,(x,int(y+r*1.40)),int(r/6))
    pygame.draw.circle(screen,colorBlack,(x,int(y+r*2.60)),int(r/6))
    #NOSE
    pygame.draw.polygon(screen, colorOrange,[(x,int(y+r/3)),(int(x-r/4),y),(int(x+r*1.5),y+int(r/10))])
    #GROUND
    pygame.draw.rect(screen, colorWhite, ((0, (ground)), (w, h)))
while True:
    screen.fill(colorBlue)
    for i in range (len(snowFlake)):
        pygame.draw.circle(screen,colorWhite,(snowFlake[i][0],snowFlake[i][1]),10)
        snowFlake[i][1]=snowFlake[i][1]+snowFlake[i][2]
        if (snowFlake[i][1]>h):
            snowFlake[i][1]=0       
    for event in pygame.event.get():
        
        #Game Exit
        if event.type== QUIT:
            pygame.quit()
            sys.exit()
        
        #Horizontal Movement
        if event.type==KEYDOWN:
            if event.key==K_d:
                x_dir=10
            if event.key==K_a:
                x_dir=-10
        if event.type==KEYUP:
            if event.key==K_d:
                if x_dir<0:
                    pass
                else:
                    x_dir=0 
            if event.key==K_a:
                if x_dir>0:
                    pass
                else:
                    x_dir=0 
                        
        #Size Change
        if event.type==KEYDOWN:
            if event.key==K_e:
                r_change=1
            if event.key==K_q:
                r_change=-1
        if event.type==KEYUP:
            if event.key==K_e or event.key==K_q:
                r_change=0
    #Jump
        
        if not jump:
            if event.type==KEYDOWN:
                if event.key==K_SPACE:
                    jump=True

                    #if sm_bottom>=ground:
                        #y-=r3
    else:
        if jump==True:
            if jumpcount>=-10:
                neg=1
                if jumpcount<0:
                    neg=-1
                y-=(jumpcount**2)*0.3*neg
                jumpcount-=1
            else:
                jump= False
                jumpcount=10



    
    #BORDERS
    if x<0+r:
        x_dir=0
        x+=5
    elif x>w-r3:
        x_dir=0
        x-=5
            
    if r==5:
        r+=1
    if sm_height>=ground:
        r-=1
        
    if sm_bottom<=ground:
        gravity=5
    elif sm_bottom>=ground:
        gravity=0
    if sm_bottom>ground+5:
        gravity=-20

    snowman(x, y, r)
    x += x_dir 
    r+=r_change
    y+=gravity
    pygame.display.update()
    fpsClock.tick(60)
